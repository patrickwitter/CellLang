
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CellParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CellParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CellParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CellParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\032\002" +
    "\000\002\004\005\000\002\004\003\000\002\033\002\000" +
    "\002\004\005\000\002\025\006\000\002\025\006\000\002" +
    "\017\007\000\002\020\011\000\002\021\005\000\002\021" +
    "\005\000\002\006\012\000\002\006\013\000\002\007\005" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\005\006\000\002\022\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\016\005\000\002\014\005\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\023\006\000\002" +
    "\023\010\000\002\023\012\000\002\024\005\000\002\024" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\005\000\002" +
    "\030\003\000\002\011\006\000\002\012\005\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\031\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\032\005\022\007\014\010\025\011\021\012" +
    "\036\013\011\016\013\023\010\034\006\035\033\037\016" +
    "\040\035\001\002\000\036\002\ufffa\005\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\016\ufffa\017\ufffa\023\ufffa" +
    "\034\ufffa\035\ufffa\037\ufffa\040\ufffa\001\002\000\004\015" +
    "\ufff9\001\002\000\040\006\uffd3\014\uffd3\015\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\036\uffd3\001\002\000\036" +
    "\002\ufffd\005\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\016\ufffd\017\ufffd\023\ufffd\034\ufffd\035\ufffd\037\ufffd" +
    "\040\ufffd\001\002\000\024\005\022\007\014\013\011\016" +
    "\013\023\010\034\006\035\051\037\016\040\035\001\002" +
    "\000\024\005\022\007\014\013\011\016\013\023\010\034" +
    "\006\035\051\037\016\040\035\001\002\000\004\002\151" +
    "\001\002\000\024\005\022\007\014\013\011\016\013\023" +
    "\010\034\006\035\051\037\016\040\035\001\002\000\004" +
    "\013\133\001\002\000\032\006\uffe5\014\uffe5\015\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\036\uffe5\001\002\000\040\006\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\036\uffd2\001" +
    "\002\000\010\015\ufffc\026\057\027\060\001\002\000\040" +
    "\006\uffd4\014\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\036\uffd4\001\002\000\004\013\130\001\002\000" +
    "\026\005\022\006\uffc8\007\014\013\011\016\013\023\010" +
    "\034\006\035\051\037\016\040\035\001\002\000\040\006" +
    "\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\063\031\064\032" +
    "\062\036\uffe7\001\002\000\032\006\uffe6\014\uffe6\015\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\036\uffe6\001\002\000\004\013\116\001\002" +
    "\000\040\006\uffce\014\uffce\015\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\036\uffce\001\002\000\032\006\uffe4\014" +
    "\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\036\uffe4\001\002\000\036\002" +
    "\ufffe\005\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\016\ufffe\017\ufffe\023\ufffe\034\ufffe\035\ufffe\037\ufffe\040" +
    "\ufffe\001\002\000\032\006\uffe2\014\uffe2\015\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\036\uffe2\001\002\000\032\006\uffe3\014\uffe3\015\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\036\uffe3\001\002\000\026\013\052\015\uffd0" +
    "\021\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\113\036\uffd0\001\002\000\034\002\001\005\022\007\014" +
    "\010\025\011\021\012\036\013\011\016\013\023\010\034" +
    "\006\035\033\037\016\040\035\001\002\000\040\006\uffd1" +
    "\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\036\uffd1\001\002\000\004\035\037\001\002\000\004\013" +
    "\040\001\002\000\006\014\uffc8\035\041\001\002\000\006" +
    "\014\uffee\020\uffee\001\002\000\006\014\uffed\020\111\001" +
    "\002\000\004\014\045\001\002\000\004\014\uffec\001\002" +
    "\000\004\033\046\001\002\000\024\005\022\007\014\013" +
    "\011\016\047\023\010\034\006\035\051\037\016\040\035" +
    "\001\002\000\032\005\022\007\014\010\025\011\021\012" +
    "\036\013\011\016\013\023\010\034\006\035\033\037\016" +
    "\040\035\001\002\000\010\015\074\026\057\027\060\001" +
    "\002\000\042\006\uffd0\013\052\014\uffd0\015\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\036\uffd0\001\002\000\026" +
    "\005\022\007\014\013\011\014\uffc8\016\013\023\010\034" +
    "\006\035\051\037\016\040\035\001\002\000\004\014\073" +
    "\001\002\000\006\014\uffca\020\071\001\002\000\004\014" +
    "\uffc9\001\002\000\012\014\uffcb\020\uffcb\026\057\027\060" +
    "\001\002\000\014\013\011\034\006\035\051\037\016\040" +
    "\035\001\002\000\014\013\011\034\006\035\051\037\016" +
    "\040\035\001\002\000\040\006\uffe8\014\uffe8\015\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\063\031\064\032\062\036\uffe8\001\002\000" +
    "\014\013\011\034\006\035\051\037\016\040\035\001\002" +
    "\000\014\013\011\034\006\035\051\037\016\040\035\001" +
    "\002\000\014\013\011\034\006\035\051\037\016\040\035" +
    "\001\002\000\040\006\uffd6\014\uffd6\015\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\036\uffd6\001\002\000\040\006" +
    "\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\036\uffd7\001\002\000\040\006\uffd5\014\uffd5\015\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\036\uffd5\001\002" +
    "\000\040\006\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\063" +
    "\031\064\032\062\036\uffe9\001\002\000\024\005\022\007" +
    "\014\013\011\016\013\023\010\034\006\035\051\037\016" +
    "\040\035\001\002\000\012\014\uffcc\020\uffcc\026\057\027" +
    "\060\001\002\000\040\006\uffcd\014\uffcd\015\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\036\uffcd\001\002\000\036" +
    "\002\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\016\ufff1\017\ufff1\023\ufff1\034\ufff1\035\ufff1\037\ufff1" +
    "\040\ufff1\001\002\000\014\015\ufffc\021\105\026\057\027" +
    "\060\036\103\001\002\000\004\017\102\001\002\000\034" +
    "\005\022\007\014\010\025\011\021\012\036\013\011\016" +
    "\013\017\100\023\010\034\006\035\033\037\016\040\035" +
    "\001\002\000\036\002\ufff0\005\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\016\ufff0\017\ufff0\023\ufff0\034\ufff0" +
    "\035\ufff0\037\ufff0\040\ufff0\001\002\000\036\002\uffff\005" +
    "\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\016\uffff" +
    "\017\uffff\023\uffff\034\uffff\035\uffff\037\uffff\040\uffff\001" +
    "\002\000\032\006\uffea\014\uffea\015\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\024\uffea\025\uffea\026\uffea\027\uffea\036" +
    "\uffea\001\002\000\024\005\022\007\014\013\011\016\013" +
    "\023\010\034\006\035\051\037\016\040\035\001\002\000" +
    "\004\015\107\001\002\000\024\005\022\007\014\013\011" +
    "\016\013\023\010\034\006\035\051\037\016\040\035\001" +
    "\002\000\012\017\ufff2\022\ufff2\026\057\027\060\001\002" +
    "\000\036\002\ufffb\005\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\016\ufffb\017\ufffb\023\ufffb\034\ufffb\035\ufffb" +
    "\037\ufffb\040\ufffb\001\002\000\012\017\ufff3\022\ufff3\026" +
    "\057\027\060\001\002\000\004\035\112\001\002\000\006" +
    "\014\uffef\020\uffef\001\002\000\024\005\022\007\014\013" +
    "\011\016\013\023\010\034\006\035\051\037\016\040\035" +
    "\001\002\000\010\015\115\026\057\027\060\001\002\000" +
    "\036\002\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\016\uffeb\017\uffeb\023\uffeb\034\uffeb\035\uffeb\037" +
    "\uffeb\040\uffeb\001\002\000\024\005\022\007\014\013\011" +
    "\016\013\023\010\034\006\035\051\037\016\040\035\001" +
    "\002\000\010\014\120\026\057\027\060\001\002\000\004" +
    "\015\ufff7\001\002\000\004\006\uffdd\001\002\000\012\006" +
    "\uffdf\020\uffdf\026\057\027\060\001\002\000\006\006\uffde" +
    "\020\126\001\002\000\004\006\125\001\002\000\032\006" +
    "\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\036\uffe1\001\002\000" +
    "\024\005\022\007\014\013\011\016\013\023\010\034\006" +
    "\035\051\037\016\040\035\001\002\000\012\006\uffe0\020" +
    "\uffe0\026\057\027\060\001\002\000\024\005\022\007\014" +
    "\013\011\016\013\023\010\034\006\035\051\037\016\040" +
    "\035\001\002\000\010\014\132\026\057\027\060\001\002" +
    "\000\004\015\ufff6\001\002\000\004\005\022\001\002\000" +
    "\006\014\136\020\135\001\002\000\006\005\137\034\140" +
    "\001\002\000\032\006\uffdc\014\uffdc\015\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\036\uffdc\001\002\000\004\005\022\001\002\000\004\014" +
    "\141\001\002\000\032\006\uffdb\014\uffdb\015\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\036\uffdb\001\002\000\006\006\145\020\144\001\002" +
    "\000\006\006\uffd8\020\uffd8\001\002\000\004\005\022\001" +
    "\002\000\004\014\146\001\002\000\032\006\uffda\014\uffda" +
    "\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\036\uffda\001\002\000\006\006\uffd9" +
    "\020\uffd9\001\002\000\012\021\105\026\057\027\060\036" +
    "\103\001\002\000\004\002\000\001\002\000\010\014\153" +
    "\026\057\027\060\001\002\000\040\006\uffcf\014\uffcf\015" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\036\uffcf\001" +
    "\002\000\004\022\155\001\002\000\024\005\022\007\014" +
    "\013\011\016\013\023\010\034\006\035\051\037\016\040" +
    "\035\001\002\000\012\024\157\025\160\026\057\027\060" +
    "\001\002\000\024\005\022\007\014\013\011\016\013\023" +
    "\010\034\006\035\051\037\016\040\035\001\002\000\032" +
    "\006\ufff5\014\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\036\ufff5\001\002" +
    "\000\010\025\162\026\057\027\060\001\002\000\032\006" +
    "\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\036\ufff4\001\002\000" +
    "\004\015\164\001\002\000\036\002\ufff8\005\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\013\ufff8\016\ufff8\017\ufff8\023" +
    "\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\040\002\011\003\033\004\027\005\006\006" +
    "\003\011\025\016\026\017\023\020\014\022\030\023\031" +
    "\025\004\026\016\027\022\030\017\001\001\000\002\001" +
    "\001\000\004\033\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\025\016\026\017\023\020\014\021" +
    "\153\022\030\023\031\026\147\027\022\030\017\001\001" +
    "\000\024\011\025\016\026\017\023\020\014\022\030\023" +
    "\031\026\151\027\022\030\017\001\001\000\002\001\001" +
    "\000\026\011\025\016\026\017\023\020\014\021\075\022" +
    "\030\023\031\026\147\027\022\030\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\011\025\014\122\015\123\016\026\017\023\020\014\022" +
    "\030\023\031\026\121\027\022\030\017\031\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\100\005\006\006\003\011\025\016\026\017\023\020\014" +
    "\022\030\023\031\025\004\026\016\027\022\030\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\041\010\042\031\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\025\016\026\017\023\020" +
    "\014\022\030\023\031\026\047\027\022\030\017\001\001" +
    "\000\040\003\076\004\027\005\006\006\003\011\025\016" +
    "\026\017\023\020\014\021\075\022\030\023\031\025\004" +
    "\026\074\027\022\030\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\011\025\012\053\013\052\016\026" +
    "\017\023\020\014\022\030\023\031\026\055\027\022\030" +
    "\017\031\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\025\027" +
    "\067\030\017\001\001\000\010\011\025\027\060\030\017" +
    "\001\001\000\002\001\001\000\006\011\025\030\066\001" +
    "\001\000\006\011\025\030\065\001\001\000\006\011\025" +
    "\030\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\025\016\026" +
    "\017\023\020\014\022\030\023\031\026\071\027\022\030" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\103\001\001\000\002\001\001\000" +
    "\034\004\100\005\006\006\003\011\025\016\026\017\023" +
    "\020\014\022\030\023\031\025\004\026\016\027\022\030" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\011\025\016\026\017\023\020\014\022" +
    "\030\023\031\026\107\027\022\030\017\001\001\000\002" +
    "\001\001\000\024\011\025\016\026\017\023\020\014\022" +
    "\030\023\031\026\105\027\022\030\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\011\025\016\026\017\023" +
    "\020\014\022\030\023\031\026\113\027\022\030\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\025" +
    "\016\026\017\023\020\014\022\030\023\031\026\116\027" +
    "\022\030\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\025\016\026" +
    "\017\023\020\014\022\030\023\031\026\126\027\022\030" +
    "\017\001\001\000\002\001\001\000\024\011\025\016\026" +
    "\017\023\020\014\022\030\023\031\026\130\027\022\030" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\142\024\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\011\025\016\026\017\023\020\014\022\030\023" +
    "\031\026\155\027\022\030\017\001\001\000\002\001\001" +
    "\000\024\011\025\016\026\017\023\020\014\022\030\023" +
    "\031\026\160\027\022\030\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CellParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CellParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CellParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (lib3652.util.TokenException te) {
		    System.out.println("Unrecognised token on line " +
		    		       lexer.getLine() + ", at pos " +
				       lexer.getChar());
		    System.out.println(te.getMessage());
		    throw te;
		}
	  
    }


		Lexer lexer;

		public CellParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CellParser$actions {
  private final CellParser parser;

  /** Constructor */
  CUP$CellParser$actions(CellParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CellParser$do_action_part00000000(
    int                        CUP$CellParser$act_num,
    java_cup.runtime.lr_parser CUP$CellParser$parser,
    java.util.Stack            CUP$CellParser$stack,
    int                        CUP$CellParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CellParser$result;

      /* select the action based on the action number */
      switch (CUP$CellParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              CellProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = new CellProgram(s); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		CellProgram start_val = (CellProgram)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = start_val;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CellParser$parser.done_parsing();
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = d; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
 RESULT = new Statement(e); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("NT$0",24, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= expression NT$0 SEMI 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;

              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= funDefn 
            {
              Statement RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		StmtFunDefn fd = (StmtFunDefn)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = fd;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Statement p = (Statement)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
 RESULT = p; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("NT$1",25, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= print NT$1 SEMI 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Statement p = (Statement)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;

              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // print ::= PRINT LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		 RESULT = new PrintStatement(exp); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("print",19, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // print ::= PRINTLN LPAREN expression RPAREN 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		 RESULT = new PrintlnStatement(exp); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("print",19, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StmtIf ::= IF LogExp COLON expression END 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).right;
		ExpLogic le = (ExpLogic)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).value;
		int consqtleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int consqtright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp consqt = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new ExpIf(le,consqt);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("StmtIf",13, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-4)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StmtIfElse ::= IF LogExp COLON expression ELSE expression END 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).right;
		ExpLogic le = (ExpLogic)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).value;
		int consqtleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).left;
		int consqtright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).right;
		Exp consqt = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int altright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp alt = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new ExpIf(le,consqt,alt);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("StmtIfElse",14, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-6)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LogExp ::= expression CMP expression 
            {
              ExpLogic RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ExpLogic(l,r,c);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("LogExp",15, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LogExp ::= expression EQU expression 
            {
              ExpLogic RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ExpLogic(l,r,Cmp.EQ);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("LogExp",15, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funDefn ::= FUN VAR LPAREN paramListE RPAREN ASSIGN expression SEMI 
            {
              StmtFunDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new StmtFunDefn(v,params,e); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("funDefn",4, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-7)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funDefn ::= FUN VAR LPAREN paramListE RPAREN ASSIGN LBRACE stmtList RBRACE 
            {
              StmtFunDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new StmtFunDefn(v,params,s); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("funDefn",4, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-8)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		pl.add(e); RESULT = pl;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		ArrayList<String> var = new ArrayList<String>(); var.add(e); RESULT = var;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = pl;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("paramListE",6, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		ArrayList<String> var = new ArrayList<String>(); RESULT = var;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("paramListE",6, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // definition ::= VAR ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LogStmt ::= LBRACE LogExp RBRACE 
            {
              ExpLogic RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		ExpLogic le = (ExpLogic)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = le;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("LogStmt",16, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= StmtIf 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = t;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= StmtIfElse 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = e;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= listConstruct 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= tableExp 
            {
              Exp RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ExpTable table = (ExpTable)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = table;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= LogStmt 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ExpLogic e = (ExpLogic)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = e;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listConstruct ::= LBRAK listE RBRAK 
            {
              ExpList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		 RESULT = new ExpList(l); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("listConstruct",12, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // list ::= list COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		l.add(e); RESULT = l;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("list",10, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // list ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		ArrayList<Exp> ae = new ArrayList<Exp>(); ae.add(e); RESULT = ae;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("list",10, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listE ::= list 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = l;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("listE",11, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ArrayList<Exp>(); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("listE",11, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tableExp ::= TABLE LPAREN listConstruct RPAREN 
            {
              ExpTable RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		ExpList c = (ExpList)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new ExpTable(c);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("tableExp",17, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tableExp ::= TABLE LPAREN listConstruct COMMA INT RPAREN 
            {
              ExpTable RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).right;
		ExpList c = (ExpList)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).value;
		int numrleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int numrright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Integer numr = (Integer)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new ExpTable(c,numr);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("tableExp",17, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tableExp ::= TABLE LPAREN listConstruct COMMA LBRAK listRows RBRAK RPAREN 
            {
              ExpTable RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).right;
		ExpList c = (ExpList)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		ArrayList<ExpList> r = (ArrayList<ExpList>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		RESULT = new ExpTable(c,r);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("tableExp",17, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-7)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listRows ::= listRows COMMA listConstruct 
            {
              ArrayList<ExpList> RESULT =null;
		int rowleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		ArrayList<ExpList> row = (ArrayList<ExpList>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int rowEntryleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int rowEntryright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ExpList rowEntry = (ExpList)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		row.add(rowEntry); RESULT = row;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("listRows",18, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listRows ::= listConstruct 
            {
              ArrayList<ExpList> RESULT =null;
		int rowEntryleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int rowEntryright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ExpList rowEntry = (ExpList)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		ArrayList<ExpList> ae = new ArrayList<ExpList>(); ae.add(rowEntry); RESULT = ae;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("listRows",18, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = f; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ExpString(s); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= DOUBLE 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ExpDouble(d); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		 RESULT = e; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = fc;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funCall ::= VAR LPAREN argListE RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new ExpFunCall(v,a);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("funCall",7, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // argList ::= argList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		al.add(e); RESULT = al;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("argList",8, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // argList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		ArrayList<Exp> ae = new ArrayList<Exp>(); ae.add(e); RESULT = ae;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("argList",8, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // argListE ::= argList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = pl;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("argListE",9, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // argListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ArrayList<Exp>(); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("argListE",9, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // empty ::= 
            {
              Object RESULT =null;

              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("empty",23, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CellParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CellParser$do_action(
    int                        CUP$CellParser$act_num,
    java_cup.runtime.lr_parser CUP$CellParser$parser,
    java.util.Stack            CUP$CellParser$stack,
    int                        CUP$CellParser$top)
    throws java.lang.Exception
    {
              return CUP$CellParser$do_action_part00000000(
                               CUP$CellParser$act_num,
                               CUP$CellParser$parser,
                               CUP$CellParser$stack,
                               CUP$CellParser$top);
    }
}

}
