
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CellParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CellParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CellParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CellParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\026\002" +
    "\000\002\004\005\000\002\004\003\000\002\017\007\000" +
    "\002\020\011\000\002\021\005\000\002\021\005\000\002" +
    "\006\012\000\002\006\013\000\002\007\005\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\005\006" +
    "\000\002\022\005\000\002\022\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\016\005\000\002\014\005\000\002\014\003\000\002\015" +
    "\003\000\002\015\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\005\000\002" +
    "\024\003\000\002\011\006\000\002\012\005\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\025\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\020\005\016\010\026\011\010\021\007\032" +
    "\005\033\024\035\013\001\002\000\024\002\ufffa\005\ufffa" +
    "\010\ufffa\011\ufffa\015\ufffa\021\ufffa\032\ufffa\033\ufffa\035" +
    "\ufffa\001\002\000\036\006\uffdf\012\uffdf\013\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\034\uffdf\001\002\000\024\002\ufffd" +
    "\005\ufffd\010\ufffd\011\ufffd\015\ufffd\021\ufffd\032\ufffd\033" +
    "\ufffd\035\ufffd\001\002\000\016\005\016\011\010\021\007" +
    "\032\005\033\040\035\013\001\002\000\016\005\016\011" +
    "\010\021\007\032\005\033\040\035\013\001\002\000\004" +
    "\002\106\001\002\000\030\006\uffea\012\uffea\013\uffea\016" +
    "\uffea\017\uffea\020\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\034\uffea\001\002\000\036\006\uffde\012\uffde\013\uffde\016" +
    "\uffde\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\034\uffde\001\002\000\010\013" +
    "\ufffc\024\042\025\044\001\002\000\036\006\uffe0\012\uffe0" +
    "\013\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\034\uffe0\001\002" +
    "\000\020\005\016\006\uffd5\011\010\021\007\032\005\033" +
    "\040\035\013\001\002\000\036\006\uffec\012\uffec\013\uffec" +
    "\016\uffec\017\uffec\020\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\047\027\050\030\046\034\uffec\001\002\000\030" +
    "\006\uffeb\012\uffeb\013\uffeb\016\uffeb\017\uffeb\020\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\034\uffeb\001\002\000\036" +
    "\006\uffdb\012\uffdb\013\uffdb\016\uffdb\017\uffdb\020\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\034\uffdb\001\002\000\030\006\uffe9\012\uffe9\013\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\034\uffe9\001\002\000\024\002\ufffe\005\ufffe\010\ufffe\011" +
    "\ufffe\015\ufffe\021\ufffe\032\ufffe\033\ufffe\035\ufffe\001\002" +
    "\000\022\011\055\013\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\072\001\002\000\022\002\001\005\016" +
    "\010\026\011\010\021\007\032\005\033\024\035\013\001" +
    "\002\000\004\033\027\001\002\000\004\011\030\001\002" +
    "\000\006\012\uffd5\033\031\001\002\000\006\012\ufff2\016" +
    "\ufff2\001\002\000\006\012\ufff1\016\070\001\002\000\004" +
    "\012\035\001\002\000\004\012\ufff0\001\002\000\004\017" +
    "\036\001\002\000\020\005\016\011\010\014\037\021\007" +
    "\032\005\033\040\035\013\001\002\000\020\005\016\010" +
    "\026\011\010\021\007\032\005\033\024\035\013\001\002" +
    "\000\040\006\uffdd\011\055\012\uffdd\013\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\034\uffdd\001\002\000\010\013\043\024" +
    "\042\025\044\001\002\000\012\011\010\032\005\033\040" +
    "\035\013\001\002\000\024\002\ufff5\005\ufff5\010\ufff5\011" +
    "\ufff5\015\ufff5\021\ufff5\032\ufff5\033\ufff5\035\ufff5\001\002" +
    "\000\012\011\010\032\005\033\040\035\013\001\002\000" +
    "\036\006\uffed\012\uffed\013\uffed\016\uffed\017\uffed\020\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\047\027\050\030" +
    "\046\034\uffed\001\002\000\012\011\010\032\005\033\040" +
    "\035\013\001\002\000\012\011\010\032\005\033\040\035" +
    "\013\001\002\000\012\011\010\032\005\033\040\035\013" +
    "\001\002\000\036\006\uffe2\012\uffe2\013\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\034\uffe2\001\002\000\036\006\uffe3\012" +
    "\uffe3\013\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\034\uffe3\001" +
    "\002\000\036\006\uffe1\012\uffe1\013\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\034\uffe1\001\002\000\036\006\uffee\012\uffee" +
    "\013\uffee\016\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\047\027\050\030\046\034\uffee\001\002" +
    "\000\020\005\016\011\010\012\uffd5\021\007\032\005\033" +
    "\040\035\013\001\002\000\004\012\uffd6\001\002\000\006" +
    "\012\uffd7\016\063\001\002\000\012\012\uffd8\016\uffd8\024" +
    "\042\025\044\001\002\000\004\012\062\001\002\000\036" +
    "\006\uffda\012\uffda\013\uffda\016\uffda\017\uffda\020\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\034\uffda\001\002\000\016\005\016\011\010\021\007\032" +
    "\005\033\040\035\013\001\002\000\012\012\uffd9\016\uffd9" +
    "\024\042\025\044\001\002\000\022\005\016\010\026\011" +
    "\010\015\066\021\007\032\005\033\024\035\013\001\002" +
    "\000\024\002\ufff4\005\ufff4\010\ufff4\011\ufff4\015\ufff4\021" +
    "\ufff4\032\ufff4\033\ufff4\035\ufff4\001\002\000\024\002\uffff" +
    "\005\uffff\010\uffff\011\uffff\015\uffff\021\uffff\032\uffff\033" +
    "\uffff\035\uffff\001\002\000\004\033\071\001\002\000\006" +
    "\012\ufff3\016\ufff3\001\002\000\016\005\016\011\010\021" +
    "\007\032\005\033\040\035\013\001\002\000\010\013\074" +
    "\024\042\025\044\001\002\000\024\002\uffef\005\uffef\010" +
    "\uffef\011\uffef\015\uffef\021\uffef\032\uffef\033\uffef\035\uffef" +
    "\001\002\000\004\006\uffe4\001\002\000\006\006\uffe5\016" +
    "\102\001\002\000\012\006\uffe6\016\uffe6\024\042\025\044" +
    "\001\002\000\004\006\101\001\002\000\030\006\uffe8\012" +
    "\uffe8\013\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\034\uffe8\001\002\000\016\005\016\011" +
    "\010\021\007\032\005\033\040\035\013\001\002\000\012" +
    "\006\uffe7\016\uffe7\024\042\025\044\001\002\000\004\013" +
    "\105\001\002\000\024\002\ufffb\005\ufffb\010\ufffb\011\ufffb" +
    "\015\ufffb\021\ufffb\032\ufffb\033\ufffb\035\ufffb\001\002\000" +
    "\004\002\000\001\002\000\010\012\110\024\042\025\044" +
    "\001\002\000\036\006\uffdc\012\uffdc\013\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\034\uffdc\001\002\000\004\020\117\001" +
    "\002\000\012\017\114\024\042\025\044\034\113\001\002" +
    "\000\016\005\016\011\010\021\007\032\005\033\040\035" +
    "\013\001\002\000\016\005\016\011\010\021\007\032\005" +
    "\033\040\035\013\001\002\000\010\020\ufff6\024\042\025" +
    "\044\001\002\000\010\020\ufff7\024\042\025\044\001\002" +
    "\000\016\005\016\011\010\021\007\032\005\033\040\035" +
    "\013\001\002\000\012\022\121\023\122\024\042\025\044" +
    "\001\002\000\016\005\016\011\010\021\007\032\005\033" +
    "\040\035\013\001\002\000\030\006\ufff9\012\ufff9\013\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\034\ufff9\001\002\000\010\023\124\024\042\025\044" +
    "\001\002\000\030\006\ufff8\012\ufff8\013\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\034\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\032\002\010\003\024\004\022\005\005\006" +
    "\003\011\020\016\021\017\017\020\011\022\013\023\016" +
    "\024\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\011\020\016\021\017\017\020\011" +
    "\021\110\022\111\023\016\024\014\001\001\000\020\011" +
    "\020\016\021\017\017\020\011\022\106\023\016\024\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\103\001\001\000\002\001\001\000\026" +
    "\011\020\014\075\015\077\016\021\017\017\020\011\022" +
    "\076\023\016\024\014\025\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\066\005\005" +
    "\006\003\011\020\016\021\017\017\020\011\022\013\023" +
    "\016\024\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\031\010\032\025\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\020\016\021\017\017\020" +
    "\011\022\040\023\016\024\014\001\001\000\030\003\064" +
    "\004\022\005\005\006\003\011\020\016\021\017\017\020" +
    "\011\022\013\023\016\024\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\020\023\053\024\014\001" +
    "\001\000\002\001\001\000\010\011\020\023\044\024\014" +
    "\001\001\000\002\001\001\000\006\011\020\024\052\001" +
    "\001\000\006\011\020\024\051\001\001\000\006\011\020" +
    "\024\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\011\020\012\056" +
    "\013\060\016\021\017\017\020\011\022\057\023\016\024" +
    "\014\025\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\011\020\016\021\017\017\020\011\022\063\023\016" +
    "\024\014\001\001\000\002\001\001\000\026\004\066\005" +
    "\005\006\003\011\020\016\021\017\017\020\011\022\013" +
    "\023\016\024\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\020" +
    "\016\021\017\017\020\011\022\072\023\016\024\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\011\020\016\021\017\017\020\011" +
    "\022\102\023\016\024\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\020\016\021\017\017\020\011\022\115" +
    "\023\016\024\014\001\001\000\020\011\020\016\021\017" +
    "\017\020\011\022\114\023\016\024\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\020\016\021\017" +
    "\017\020\011\022\117\023\016\024\014\001\001\000\002" +
    "\001\001\000\020\011\020\016\021\017\017\020\011\022" +
    "\122\023\016\024\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CellParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CellParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CellParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (lib3652.util.TokenException te) {
		    System.out.println("Unrecognised token on line " +
		    		       lexer.getLine() + ", at pos " +
				       lexer.getChar());
		    System.out.println(te.getMessage());
		    throw te;
		}
	  
    }


		Lexer lexer;

		public CellParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CellParser$actions {
  private final CellParser parser;

  /** Constructor */
  CUP$CellParser$actions(CellParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CellParser$do_action_part00000000(
    int                        CUP$CellParser$act_num,
    java_cup.runtime.lr_parser CUP$CellParser$parser,
    java.util.Stack            CUP$CellParser$stack,
    int                        CUP$CellParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CellParser$result;

      /* select the action based on the action number */
      switch (CUP$CellParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              CellProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = new CellProgram(s); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		CellProgram start_val = (CellProgram)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = start_val;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CellParser$parser.done_parsing();
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = d; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
 RESULT = new Statement(e); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= expression NT$0 SEMI 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;

              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= funDefn 
            {
              Statement RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		StmtFunDefn fd = (StmtFunDefn)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = fd;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // StmtIf ::= IF LogExp COLON expression END 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).right;
		ExpLogic le = (ExpLogic)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).value;
		int consqtleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int consqtright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp consqt = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new ExpIf(le,consqt);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("StmtIf",13, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-4)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // StmtIfElse ::= IF LogExp COLON expression ELSE expression END 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).right;
		ExpLogic le = (ExpLogic)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).value;
		int consqtleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).left;
		int consqtright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).right;
		Exp consqt = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int altright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp alt = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new ExpIf(le,consqt,alt);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("StmtIfElse",14, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-6)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LogExp ::= expression CMP expression 
            {
              ExpLogic RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ExpLogic(l,r,c);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("LogExp",15, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LogExp ::= expression EQU expression 
            {
              ExpLogic RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ExpLogic(l,r,Cmp.EQ);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("LogExp",15, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funDefn ::= FUN VAR LPAREN paramListE RPAREN EQU expression SEMI 
            {
              StmtFunDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new StmtFunDefn(v,params,e); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("funDefn",4, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-7)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funDefn ::= FUN VAR LPAREN paramListE RPAREN EQU LBRACE stmtList RBRACE 
            {
              StmtFunDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new StmtFunDefn(v,params,s); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("funDefn",4, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-8)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		pl.add(e); RESULT = pl;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		ArrayList<String> var = new ArrayList<String>(); var.add(e); RESULT = var;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = pl;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("paramListE",6, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		ArrayList<String> var = new ArrayList<String>(); RESULT = var;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("paramListE",6, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definition ::= VAR ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= StmtIf 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = t;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= StmtIfElse 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = e;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= listConstruct 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listConstruct ::= LBRAK listE RBRAK 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		 RESULT = new ExpList(l); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("listConstruct",12, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list ::= list COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		l.add(e); RESULT = l;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("list",10, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // list ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		ArrayList<Exp> ae = new ArrayList<Exp>(); ae.add(e); RESULT = ae;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("list",10, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listE ::= list 
            {
              ArrayList<Exp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ArrayList<Exp> l = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = l;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("listE",11, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ArrayList<Exp>(); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("listE",11, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = f; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ExpString(s); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		 RESULT = e; 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = fc;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funCall ::= VAR LPAREN argListE RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-1)).value;
		RESULT = new ExpFunCall(v,a);
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("funCall",7, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-3)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // argList ::= argList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		al.add(e); RESULT = al;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("argList",8, ((java_cup.runtime.Symbol)CUP$CellParser$stack.elementAt(CUP$CellParser$top-2)), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		ArrayList<Exp> ae = new ArrayList<Exp>(); ae.add(e); RESULT = ae;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("argList",8, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // argListE ::= argList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = pl;
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("argListE",9, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // argListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CellParser$stack.peek()).value;
		RESULT = new ArrayList<Exp>(); 
              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("argListE",9, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // empty ::= 
            {
              Object RESULT =null;

              CUP$CellParser$result = parser.getSymbolFactory().newSymbol("empty",19, ((java_cup.runtime.Symbol)CUP$CellParser$stack.peek()), RESULT);
            }
          return CUP$CellParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CellParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CellParser$do_action(
    int                        CUP$CellParser$act_num,
    java_cup.runtime.lr_parser CUP$CellParser$parser,
    java.util.Stack            CUP$CellParser$stack,
    int                        CUP$CellParser$top)
    throws java.lang.Exception
    {
              return CUP$CellParser$do_action_part00000000(
                               CUP$CellParser$act_num,
                               CUP$CellParser$parser,
                               CUP$CellParser$stack,
                               CUP$CellParser$top);
    }
}

}
