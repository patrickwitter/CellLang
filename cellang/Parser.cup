import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		Lexer lexer;

		public CellParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (lib3652.util.TokenException te) {
		    System.out.println("Unrecognised token on line " +
		    		       lexer.getLine() + ", at pos " +
				       lexer.getChar());
		    System.out.println(te.getMessage());
		    throw te;
		}
	  :};

// 
terminal DOT,LBRAK, RBRAK; 

// CELLANG KEYWORDS 
terminal TABLE;
terminal PRINT, PRINTLN;

/* Terminals (tokens returned by the scanner). */
// keywords
terminal FUN;

// special symbols
terminal LPAREN, RPAREN, SEMI;
terminal LBRACE, RBRACE, COMMA, EQU;
terminal COLON;
terminal IF, ELSE, END; 

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, ASSIGN;

// terminals with values
terminal Integer INT;
terminal String VAR;
terminal Cmp CMP;     
terminal String STRING;
terminal Double DOUBLE;


/* Non terminals */
non terminal CellProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtDefinition definition;

non terminal StmtFunDefn funDefn;

/// These will be a list of "VARS" [variables] which have a string value 
/// This is a list of paramters 
non terminal ArrayList<String> paramList;
non terminal ArrayList<String> paramListE;

non terminal ExpFunCall funCall;
/// These will be a list of Expressions 
non terminal ArrayList<Exp> argList;
non terminal ArrayList<Exp> argListE;

non terminal ArrayList<Exp> list;
non terminal ArrayList<Exp> listE;
non terminal ExpList listConstruct; 
non terminal Exp ExpIf; 
non terminal Exp ExpIfElse;
non terminal IfStatement ifStmt;
non terminal IfStatement ifElseStmt;
non terminal ExpLogic LogExp;
non terminal ExpLogic LogStmt;

//For table
non terminal ExpTable tableExp;
non terminal ArrayList<ExpList> listRows;

// Slice the table based on column e.g. table[ColA:ColC]
non terminal ExpTable sliceTable;

// Slice table based on column name e.g. table.Col1
non terminal ExpTable selectCol; 

// Slice table based on column condition e.g. table[Col1 > 10]
non terminal ExpTable selectTableCond;
// KEYWORDS

non terminal Statement print;
/* **** */

non terminal Exp expression;
non terminal Exp term;
non terminal Exp factor;
non terminal empty;

/* Grammar rules */

/// A program is a statement list 
program ::= stmtList:s {: RESULT = new CellProgram(s); :};

/// A statement list is a list of statements or one statement 
stmtList ::= stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

/*
	REUSE AS MANY RULES AS POSSIBLE INSTEAD OF CREATING NEW ONES 
	TO AVOID CONFLICTS 
*/

/// A statement is a definition or expression or a function definition 
/// All end with a semi colon check rules if you do not see one 
/// Values that return nil or strictly expressions should be statments 

stmt ::= definition:d {: RESULT = d; :} |
	 expression:e {: RESULT = new Statement(e); :} SEMI | funDefn:fd {:RESULT = fd;:} | print:p {: RESULT = p; :} SEMI |
	 ifStmt:i {:RESULT = i;:} | ifElseStmt:i {:RESULT = i;:};

// Print Statements 
print ::= PRINT LPAREN expression:exp RPAREN
	  	  {: RESULT = new PrintStatement(exp); :} |
		  PRINTLN LPAREN expression:exp RPAREN
	  	  {: RESULT = new PrintlnStatement(exp); :};

/*If grammar*/
ExpIf ::= IF LogExp:le COLON expression:consqt END {:RESULT = new ExpIf(le,consqt);:};

/// IF ELSE grammar 
ExpIfElse ::= IF LogExp:le COLON expression:consqt ELSE expression:alt END {:RESULT = new ExpIf(le,consqt,alt);:};

//TODO IMPLEMENT IF STATEMENT
// NOTE THAT SEMI COLONA HAVE TO BE EXPLICIT WITH STATEMENTS 
/// IF STMT 
ifStmt ::= IF LogExp:le LBRACE expression:consqt RBRACE {:RESULT =  new IfStatement(consqt);:};

/// IFELSE STMT 
ifElseStmt ::= IF LogExp:le LBRACE expression:consqt RBRACE ELSE LBRACE expression:alt RBRACE {:RESULT =  new IfStatement(consqt);:};

/// Logical expression 
LogExp ::= expression:l CMP:c expression:r {:RESULT = new ExpLogic(l,r,c);:} | expression:l EQU expression:r {:RESULT = new ExpLogic(l,r,Cmp.EQ);:};

/// Function Definition 
funDefn ::= FUN VAR:v LPAREN paramListE:params RPAREN ASSIGN expression:e SEMI {:RESULT = new StmtFunDefn(v,params,e); :}|  
FUN VAR:v LPAREN paramListE:params RPAREN ASSIGN LBRACE stmtList:s RBRACE {:RESULT = new StmtFunDefn(v,params,s); :};  /* complete this */

/// List of parameters 
paramList ::= paramList:pl COMMA VAR:e {:pl.add(e); RESULT = pl;:} | VAR:e {:ArrayList<String> var = new ArrayList<String>(); var.add(e); RESULT = var;:};  

/// List of paramters plus empty 
paramListE ::= paramList:pl {:RESULT = pl;:} | empty:e {:ArrayList<String> var = new ArrayList<String>(); RESULT = var;:};

/// Variable definition 
definition ::= VAR:v ASSIGN expression:e SEMI {:
		   RESULT = new StmtDefinition(v, e);
		:};

LogStmt ::= LBRACE LogExp:le RBRACE {:RESULT = le;:};
/// NOTE SEMI COLON IS AT STATEMENT LEVEL 
/// Every expression ends with a semi colon 
expression ::= 	expression:e PLUS term:t {:
			RESULT = new ExpAdd(e, t); :} |
		expression:e MINUS term:t {:
			RESULT = new ExpSub(e, t); :} | 
		term:t {: RESULT = t; :} |
		listConstruct:l {: RESULT = l; :} | tableExp:table {:RESULT = table;:} | LogStmt:e {:RESULT = e;:};

/// This is the list 
listConstruct ::= LBRAK listE:l RBRAK {: RESULT = new ExpList(l); :}; 
/// List of expressions 
list ::= list:l COMMA expression:e {:l.add(e); RESULT = l;:} | expression:e {:ArrayList<Exp> ae = new ArrayList<Exp>(); ae.add(e); RESULT = ae;:};  

/// List of expressions inclusive of empty list 
listE ::= list:l {:RESULT = l;:} | empty:e {:RESULT = new ArrayList<Exp>(); :};

///----------------- TABLE Construction
tableExp ::= TABLE LPAREN listConstruct:c RPAREN {:RESULT = new ExpTable(c);:} |
             TABLE LPAREN listConstruct:c COMMA INT:numr RPAREN {:RESULT = new ExpTable(c,numr);:} |
			 TABLE LPAREN listConstruct:c COMMA LBRAK listRows:r RBRAK RPAREN {:RESULT = new ExpTable(c,r);:};

/// List of Rows
/// A List of Row Entry (List)
/// This produces a sequence of lists seperated by commas i.e [],[],[],
listRows ::= listRows:row COMMA listConstruct:rowEntry {:row.add(rowEntry); RESULT = row;:} | listConstruct:rowEntry {:ArrayList<ExpList> ae = new ArrayList<ExpList>(); ae.add(rowEntry); RESULT = ae;:};  

///-----------END

///----------------- TABLE OPERATIONS 

// Slicing

sliceTable ::= VAR:tableNm LBRAK VAR:Col1 COLON VAR:Col2 RBRAK {:RESULT = new ExpTable(new ExpList(new ArrayList<Exp>(Arrays.asList(new ExpString("Col1"),new ExpString("Col2")))));:};

// Select subTable based on  Column 
selectCol ::= VAR:tableNm DOT VAR:Col {:RESULT = new ExpTable(new ExpList(new ArrayList<Exp>(Arrays.asList(new ExpString("Col1"),new ExpString("Col2")))));:}; 

// Select subTable based on  condition 
// TODO Check if the left side of the expression is a VAR if not throw error
selectTableCond ::= VAR:tableNm LBRAK LogExp:expr RBRAK {:RESULT = new ExpTable(new ExpList(new ArrayList<Exp>(Arrays.asList(new ExpString("Col1"),new ExpString("Col2")))));:};


///----------------------END 

term ::= term:t MUL factor:f {:
		RESULT = new ExpMul(t, f); :} |
	 term:t DIV factor:f {:
		RESULT = new ExpDiv(t, f); :} |
	 term:t MOD factor:f {:
		RESULT = new ExpMod(t, f); :} |
	 factor:f {: RESULT = f; :} | ExpIf:t {:RESULT = t;:} | ExpIfElse:e {:RESULT = e;:}
	 | sliceTable:st {:RESULT = st;:} | selectCol:sc {:RESULT = sc;:} | selectTableCond:stc {:RESULT = stc;:} ;

factor ::= INT:ilit {: RESULT = new ExpLit(ilit); :} |
		STRING:s {:RESULT = new ExpString(s); :} | 
		DOUBLE:d {:RESULT = new ExpDouble(d); :} |
		VAR:var {: RESULT = new ExpVar(var); :} |
		LPAREN expression:e RPAREN {: RESULT = e; :}	| funCall:fc {:RESULT = fc;:} ;

funCall ::= VAR:v LPAREN argListE:a RPAREN {:RESULT = new ExpFunCall(v,a);:};

/// List of arguement expressions
argList ::= argList:al COMMA expression:e {:al.add(e); RESULT = al;:} | expression:e {:ArrayList<Exp> ae = new ArrayList<Exp>(); ae.add(e); RESULT = ae;:};  

/// List of arguement expressions inclusive of the empty arguement 
argListE ::= argList:pl {:RESULT = pl;:} | empty:e {:RESULT = new ArrayList<Exp>(); :};


empty ::= ;
